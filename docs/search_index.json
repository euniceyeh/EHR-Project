[
["index.html", "BST 260 Final Project: EHR Chapter 1 Overview and Motivation", " BST 260 Final Project: EHR Eunice Yeh, Lauren Yoo, Katherine Wang 2017-12-10 Chapter 1 Overview and Motivation “Insert an inspirational quote here.” tehe doge "],
["work.html", "Chapter 2 Related Work", " Chapter 2 Related Work Anything that inspired you, such as a paper, a web site, or something we discussed in class. We go to school and work in the Longwood Medical Area of Boston, MA, where there is a different hospital on almost every block. [story to be continued…] "],
["questions.html", "Chapter 3 Initial Questions", " Chapter 3 Initial Questions What questions are you trying to answer? How did these questions evolve over the course of the project? What new questions did you consider in the course of your analysis? Since the Medicare &amp; Medicaid EHR Incentive Program accepts two types of providers in two different ways, our primary objective of looking at provider demographics on the use of EHR is split into two separate parts: What are the demographics of eligible physicians in the incentive program who have been using EHR; are these different from those who have yet to use EHR? What are the demographics of eligible hospitals in the incentive program who have been using EHR; are these different from those who have yet to use EHR? Our secondary objectives are then: Are all of these demographics and effects on EHR use different geographically? What are the demographics of both types of providers who use EHR by the specific EHR vendor or product types? "],
["data.html", "Chapter 4 Data 4.1 Eligible Professionals (EPs) 4.2 Eligible Hospitals (Hosp) 4.3 Vendors &amp; Products (EHR)", " Chapter 4 Data All of our data are based on the 2016 Medicare &amp; Medicaid EHR Incentive Program since the adoption of EHR is an ongoing basis: a provider who adopted and used EHR during the 2014 program, for example, is likely to still be in the program the following years. So theorethically, the 2016 program would be the most cumulative source of providers adopting EHR. As mentioned in Related Work, the adoption of EHR has been consistently rising over the years across the U.S., so there is also no interest in looking at the use over time when we can just look at the latest collection of data. And since 2017 isn’t quite over yet, it wouldn’t be fair to start looking at the usage of EHR within the 2017 program, so the most recent completed data would be on the 2016 program. 4.1 Eligible Professionals (EPs) To answer the first of our Initial Questions as to whether or not a physician’s age, education, practice location, etc. may be related to their use of EHR in the incentive program, we must be able to find demographics data at the practitioner level. 4.1.1 Source/Metadata And here we are: readily available on Data.Medicare.gov are the demographics of physicians eligible for the Medicare &amp; Medicaid EHR incentive program at the practitioner level. We used the api link to read in the dataset and applied SQL filtering options to speed up the download since it is a large file. we specified the limit to be exactly 2254703 because that’s the exact number of rows the data contain, if we don’t specify this the default limit of rows that get downloaded is 100. to compensate, we will specify specific columns to download, which also be specified in the download link (looked thru metadata on the website to select variables i’m interested in). # change limit to 2254703 on the final run dat &lt;- read.csv(&quot;https://data.medicare.gov/resource/c8qv-268j.csv?$limit=10000&amp;$select=npi,frst_nm,gndr,cred,med_sch,grd_yr,pri_spec,cty,st,zip,hosp_afl_1,hosp_afl_lbn_1,ehr&amp;$order=npi&quot;) 4.1.2 Wrangling Let’s first take a look at the data structure and a summary of all the columns. str(dat) ## &#39;data.frame&#39;: 10000 obs. of 13 variables: ## $ cred : Factor w/ 16 levels &quot;&quot;,&quot;AU&quot;,&quot;CNA&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ cty : Factor w/ 2023 levels &quot;ABBEVILLE&quot;,&quot;ABERDEEN&quot;,..: 454 56 1548 524 1785 217 1093 1093 74 74 ... ## $ ehr : Factor w/ 2 levels &quot;&quot;,&quot;Y&quot;: 1 1 1 1 2 1 1 1 1 1 ... ## $ frst_nm : Factor w/ 1872 levels &quot;AAMIR&quot;,&quot;AARON&quot;,..: 155 155 155 1722 1408 409 763 763 917 917 ... ## $ gndr : Factor w/ 2 levels &quot;F&quot;,&quot;M&quot;: 2 2 2 2 2 2 1 1 2 2 ... ## $ grd_yr : int 1994 1994 1994 2003 1999 2003 2007 2007 1997 1997 ... ## $ hosp_afl_1 : int 490126 490126 490126 140010 360262 391312 360098 360098 60024 60024 ... ## $ hosp_afl_lbn_1: Factor w/ 1450 levels &quot;&quot;,&quot;ABBEVILLE AREA MEDICAL CENTER&quot;,..: 615 615 615 341 743 919 584 584 1333 1333 ... ## $ med_sch : Factor w/ 210 levels &quot;A T STILL UN, ARIZONA SCHL OF DENT.Y &amp; ORAL HLTH&quot;,..: 101 101 101 160 101 108 128 128 97 97 ... ## $ npi : int 1003000126 1003000126 1003000126 1003000134 1003000142 1003000407 1003000423 1003000423 1003000480 1003000480 ... ## $ pri_spec : Factor w/ 72 levels &quot;ADDICTION MEDICINE&quot;,..: 33 33 33 53 3 21 44 44 24 24 ... ## $ st : Factor w/ 53 levels &quot;AK&quot;,&quot;AL&quot;,&quot;AR&quot;,..: 47 47 47 15 36 39 36 36 6 6 ... ## $ zip : int 201662247 222053610 241537474 602011718 436082675 158251367 440608702 440608702 800452545 800452545 ... summary(dat) ## cred cty ehr frst_nm gndr ## :9575 PITTSBURGH : 209 :8623 MICHAEL : 182 F:5699 ## MD : 253 HOUSTON : 156 Y:1377 SARAH : 134 M:4301 ## PA : 39 NEW YORK : 125 JENNIFER: 127 ## PT : 29 ANN ARBOR : 119 DAVID : 103 ## NP : 19 DALLAS : 117 MATTHEW : 92 ## OD : 17 PHILADELPHIA: 99 JOHN : 89 ## (Other): 68 (Other) :9175 (Other) :9273 ## grd_yr hosp_afl_1 ## Min. :1963 Min. : 10001 ## 1st Qu.:2004 1st Qu.:140011 ## Median :2009 Median :260032 ## Mean :2007 Mean :269085 ## 3rd Qu.:2012 3rd Qu.:390147 ## Max. :2017 Max. :800001 ## NA&#39;s :9 NA&#39;s :3156 ## hosp_afl_lbn_1 ## :3171 ## UNIVERSITY OF VIRGINIA MEDICAL CENTER : 64 ## BANNER PAYSON MEDICAL CENTER : 63 ## UNIVERSITY OF MICHIGAN HEALTH SYSTEM : 60 ## PROVIDENCE REGIONAL MEDICAL CENTER EVERETT: 59 ## EASTERN MAINE MEDICAL CENTER : 56 ## (Other) :6527 ## med_sch npi ## OTHER :6302 Min. :1.003e+09 ## BAYLOR COLLEGE OF MEDICINE : 73 1st Qu.:1.003e+09 ## UNIVERSITY OF FLORIDA COLLEGE OF MEDICINE: 67 Median :1.003e+09 ## LAKE ERIE COLLEGE OF OSTEOPATHIC MEDICINE: 63 Mean :1.003e+09 ## NEW YORK UNIVERSITY SCHOOL OF MEDICINE : 59 3rd Qu.:1.003e+09 ## INDIANA UNIVERSITY SCHOOL OF MEDICINE : 58 Max. :1.004e+09 ## (Other) :3378 ## pri_spec st ## NURSE PRACTITIONER :1569 TX : 780 ## PHYSICIAN ASSISTANT :1053 CA : 768 ## INTERNAL MEDICINE : 936 PA : 679 ## PHYSICAL THERAPY : 652 FL : 612 ## FAMILY PRACTICE : 638 NY : 592 ## CERTIFIED REGISTERED NURSE ANESTHETIST: 541 MI : 422 ## (Other) :4611 (Other):6147 ## zip ## Min. : 603 ## 1st Qu.:212086417 ## Median :452192364 ## Mean :476032054 ## 3rd Qu.:752434115 ## Max. :998017863 ## Observations from the above output: There are 53 levels of states, which means this data include states outside of the 50 mainland states and DC. we don’t have sufficient data on the virgin islands and guam, so we will have to filter these states out. There is one person whose gender is unknown, we will filter this person out since we want to group by gender. There are rows with missing graduation years, will need to filer this out too if graduation years is one of the main demographics of interest (will mess up plotting). Also, one or more physician who graduated in 2017 slipped into our data…we will ignore this by filtering it out too. The zip code, 603, is out of range. a standard zip code has to be at least 5 digits. looks like most zip codes in this data are the full 9-digit zip codes, which can be split into the standard 5-digit format and the 4-digit after. There are way too many levels of medical schools and primary specialties, we will probably focus on looking at the most popular ones for exploratory analysis. data(&quot;state&quot;) clean &lt;- dat %&gt;% filter(st %in% c(state.abb, &quot;DC&quot;)) %&gt;% filter(gndr %in% c(&quot;F&quot;, &quot;M&quot;) &amp; !is.na(as.integer(grd_yr)) &amp; grd_yr != 2017) Now we only have 51 levels of states, 2 levels of gender, and no records with missing graduation year. But we still have zip codes as small as 2138, which is still out of range. To make sure only keep valid zip codes (since there may be other ways the zip codes are not clean), we can try to use R’s zip code package to validate our zip codes. # separate out the first five zip codes from the last four extension to match R zipcode data clean &lt;- clean %&gt;% mutate(zip.ext = substr(as.character(zip), 6, 9), zip = substr(as.character(zip), 1, 5)) # use R zipcode package and data library(zipcode) data(&quot;zipcode&quot;) zip_dat &lt;- clean %&gt;% left_join(zipcode,by=&#39;zip&#39;) # check if any of the invalid zip codes were matched to R&#39;s zip code package zip_dat %&gt;% filter(nchar(zip) &lt; 5) %&gt;% select(npi, frst_nm, zip, cty, st, city, state) %&gt;% head(15) ## npi frst_nm zip cty st city state ## 1 1003003088 AVANI 8824 KENDALL PARK NJ &lt;NA&gt; &lt;NA&gt; ## 2 1003021866 DONNA 8060 MOUNT HOLLY NJ &lt;NA&gt; &lt;NA&gt; ## 3 1003024142 ALLISON 7719 WALL NJ &lt;NA&gt; &lt;NA&gt; ## 4 1003033390 BRIAN 6385 WATERFORD CT &lt;NA&gt; &lt;NA&gt; ## 5 1003033390 BRIAN 6385 WATERFORD CT &lt;NA&gt; &lt;NA&gt; ## 6 1003041427 LAURIE 8302 BRIDGETON NJ &lt;NA&gt; &lt;NA&gt; ## 7 1003149451 COURTNEY 8401 ATLANTIC CITY NJ &lt;NA&gt; &lt;NA&gt; ## 8 1003149477 ASHLEY 7430 MAHWAH NJ &lt;NA&gt; &lt;NA&gt; ## 9 1003150137 ALAN 2601 HYANNIS MA &lt;NA&gt; &lt;NA&gt; ## 10 1003162132 JESSICA 4901 WATERVILLE ME &lt;NA&gt; &lt;NA&gt; ## 11 1003188954 KIMBERLY 2557 OAK BLUFFS MA &lt;NA&gt; &lt;NA&gt; ## 12 1003228479 LAUREN 3103 MANCHESTER NH &lt;NA&gt; &lt;NA&gt; ## 13 1003248204 KELLY 2138 CAMBRIDGE MA &lt;NA&gt; &lt;NA&gt; As expected, none of the zip codes with only 4 digits matched, so these 13 records will have to be thrown away in order for us to be able to accurately do analysis on the location variables and regional analysis and to match with the vendor data by zip code. zip_mismatch &lt;- zip_dat %&gt;% mutate(st = as.character(st)) %&gt;% filter(st != state | nchar(zip) &lt; 5) %&gt;% select(npi, frst_nm, zip, cty, city, st, state, latitude, longitude) # check number of records mismatched nrow(zip_mismatch) ## [1] 399 # look at the top five mismatches (top5_mismatch &lt;- zip_mismatch %&gt;% group_by(zip, cty, st, city, state) %&gt;% summarize(n = n()) %&gt;% arrange(desc(n)) %&gt;% head(5)) ## # A tibble: 5 x 6 ## # Groups: zip, cty, st, city [5] ## zip cty st city state n ## &lt;chr&gt; &lt;fctr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 21156 BOSTON MA Upper Falls MD 10 ## 2 16550 WORCESTER MA Erie PA 7 ## 3 22152 BOSTON MA Springfield VA 7 ## 4 23602 PLYMOUTH MA Newport News VA 7 ## 5 31033 MANCHESTER NH Haddock GA 7 In order to not just blatantly throw away 399 mismatches, we will look at the top 5 most common mismatches on a case-by-case basis to try to salvage as many records as possible without searching too deeply in our dataset. Also, starting from the 6th most common mismatches, the number of records n were down to 58 or less, so they would have little effect on the dataset. The results of searching up the top 10 mismatches on Google Maps: The zipcode 99362 spans across Walla Walla in both WA and OR, so it is likely that the practice is located on the WA side of the zipcode coverage. We will ignore the state mismatch from the zipcode package for this case. The zipcode 52761 does belong to Muscatine, IA, which is right on the border of IL. Again, the practice is most likely located on the IA side. Will ignore the state mismatch for this case as well. The zip code for Granger, IN was most likely mistyped. The correct zip code for Granger is 46530, which is very close to 43530. We will fix the zipcode for this particular case only. The zipcode 22401 does belong to Frederickburg, VA, and is not near the border of VA and MD at all. There is a “Frederick” city in MD, but none of its zipcodes look similar enough to 22401. No clear culprit, will have to let this one go. :( The zipcode for Hanover, MD is 21076, which was most likely mistyped as 20176. We will fix this particular case as well. # leave out the 22401 Fredericksburg MD mismatch, fix the zip codes for Granger and Hanover. zip_fix &lt;- top5_mismatch %&gt;% ungroup() %&gt;% filter(cty != &#39;FREDERICKSBURG&#39;) %&gt;% mutate(zip = replace(zip, zip %in% c(43530, 20176), c(46530, 21076))) %&gt;% select(-n) mismatch_tokeep &lt;- zip_dat %&gt;% select(-zip) %&gt;% # we want to replace the original wrong zip codes with the fixed zip codes inner_join(zip_fix, by = c(&#39;cty&#39;,&#39;st&#39;, &#39;city&#39;, &#39;state&#39;)) ## Warning: Column `st` joining factor and character vector, coercing into ## character vector clean &lt;- zip_dat %&gt;% mutate(st = as.character(st), state = as.character(state)) %&gt;% filter(st == state | nchar(zip) == 5) %&gt;% # keeping only the matches bind_rows(mismatch_tokeep) %&gt;% # then add in the mismatches we wanted to keep or have fixed select(-city, -state) # will rely on the original city and state columns Continuing on with our wrangling… About 31.56% of the (original) data are of physicians not affiliated with any hospital, these are the practitioners we will subset on to do our practitioner-level analysis on since these are the only cases when a physician’s demographics can have an effect on the choice of using EHR. For physicians who are affiliated with a hospital, their demographics would no longer be informative as to whether or not they use EHR, it would then have to be the demographics of the hospitals that could inform the use of EHR at the hospital-level. Thus, we were able to find hospital demographics such as ___ on hospitals across the U.S. in general, which will be discussed in the next section within this chapter, but there’s no indication of participation in the incentive program nor EHR use, so we will have to merge that hospital demographic data with the practitioners in this dataset who are affiliated with any one hospital. for the practitioner-level analysis we want to: Calculate the number of years since graudation Use 1’s and 0’s instead of ‘Y’ and blanks as indicator of EHR use for our binary outcome Keep only one record per physician, which means we would have to lose the distinct practice locations for physicians who have multiple practices. But since we can’t fit our logistic model with either city, state, or zip code, there’s no point in keeping this detail. Instead, we can calculate the number of distinct practices these physicians have in order to collapse the data to the practitioner level. EPs &lt;- clean %&gt;% filter(is.na(as.integer(hosp_afl_1))) %&gt;% mutate(yrs_grd = 2016 - as.integer(grd_yr), # calc the n of years since graduation cred = case_when(cred == &#39;&#39; ~ &#39;NA&#39;, # assign blanks to NA&#39;s TRUE ~ as.character(cred)), cred = as.factor(cred), ehr = case_when(ehr == &#39;Y&#39; ~ 1, # use numeric indicators ehr == &#39;&#39; ~ 0), ehr = as.factor(ehr)) %&gt;% select(-hosp_afl_1, -hosp_afl_lbn_1, -frst_nm) %&gt;% distinct(npi, .keep_all = TRUE) # keep only one row per physician # calculate the number of practices for each physician SL &lt;- dat %&gt;% group_by(npi) %&gt;% summarise(locations = n_distinct(zip)) EPs &lt;- left_join(EPs, SL, by=&quot;npi&quot;) rm(SL) summary(EPs) ## cred cty ehr gndr grd_yr ## NA :1535 NEW YORK : 21 0:1531 F:1068 Min. :1965 ## PT : 14 ROCHESTER : 16 1: 70 M: 533 1st Qu.:2003 ## DC : 10 DALLAS : 14 Median :2009 ## MD : 10 COLUMBUS : 13 Mean :2006 ## CSW : 8 DURHAM : 13 3rd Qu.:2013 ## OD : 7 SAN ANTONIO: 13 Max. :2016 ## (Other): 17 (Other) :1511 ## med_sch npi ## OTHER :1133 Min. :1.003e+09 ## LOGAN COLLEGE OF CHIROPRACTIC : 19 1st Qu.:1.003e+09 ## SOUTHERN COLLEGE OF OPTOMETRY : 17 Median :1.003e+09 ## PALMER COLLEGE CHIROPRACTIC - DAVENPORT : 16 Mean :1.003e+09 ## NEW YORK CHIROPRACTIC COLLEGE : 12 3rd Qu.:1.003e+09 ## ILLINOIS COLLEGE OF OPTOMETRY AT CHICAGO: 11 Max. :1.004e+09 ## (Other) : 393 ## pri_spec st zip ## PHYSICAL THERAPY :306 Length:1601 Length:1601 ## NURSE PRACTITIONER :247 Class :character Class :character ## CLINICAL SOCIAL WORKER:201 Mode :character Mode :character ## CHIROPRACTIC :128 ## PHYSICIAN ASSISTANT :108 ## OPTOMETRY : 99 ## (Other) :512 ## zip.ext latitude longitude yrs_grd ## Length:1601 Min. :20.04 Min. :-161.88 Min. : 0.00 ## Class :character 1st Qu.:33.87 1st Qu.:-102.09 1st Qu.: 3.00 ## Mode :character Median :38.69 Median : -88.16 Median : 7.00 ## Mean :37.66 Mean : -93.17 Mean :10.01 ## 3rd Qu.:41.28 3rd Qu.: -80.70 3rd Qu.:13.00 ## Max. :64.84 Max. : -73.07 Max. :51.00 ## NA&#39;s :66 NA&#39;s :66 ## locations ## Min. : 1.000 ## 1st Qu.: 1.000 ## Median : 1.000 ## Mean : 1.314 ## 3rd Qu.: 1.000 ## Max. :25.000 ## [do i need to explain the analysis-ready data?] 4.1.3 Output # permanently save physician-level analysis dataset to repo saveRDS(EPs, file = &quot;./data/EPs.rds&quot;) # for the rest of practitioners who are affiliated with a hospital hosp_afl &lt;- clean %&gt;% # filter on the clean version filter(!is.na(as.integer(hosp_afl_1))) %&gt;% mutate(hosp_afl_lbn_1 = as.character(hosp_afl_lbn_1), st = as.character(st)) %&gt;% # only keep relevant or potentially interesting variables select(hosp_afl_lbn_1, st, cty, zip, ehr, hosp_afl_1, pri_spec, gndr, grd_yr) # clean up intermediate data sets rm(dat, clean, zipcode, zip_dat, zip_fix, zip_mismatch, mismatch_tokeep, top5_mismatch) We are storing the EPs data set as a .rds file in our repo under the /data directory for reproducibility of our analysis since this is the clean analysis-ready data set that will be used to analyze the potential effects of practitioner demographics on EHR use in our Primary Analysis. The hosp_afl data set, still containing one row per physician per hospital location, is to be merged with the hospital demographics data discussed in the next section. Both EPs and the merged-to-be data of hosp_afl containing the hospital demographics are to be merged with the EHR vendor and product information in the last section of this chapter, in order to explore both physician and hospital demographics by specific types of EHR used. 4.2 Eligible Hospitals (Hosp) General hospital demographics such as the total number of staffed beds, total number of discharges, total number of patient days, and total gross patient revenue (inpatient and outpatient) are all publicly accessible on the American Hospital Directory organized by U.S. states. Since there is not a .csv file ready for us to download and the hospital demographics are already neatly summarized in a table for each state, we decided that we could do some web scraping for this. 4.2.1 Source/Metadata The link to each U.S. state’s summary table of hospital demographics by hospital name in that state begins with the same URL: https://www.ahd.com/states/hospital_ and ends with the state’s abbreviation plus a .html. For example, a table of hospital demographics for each hospital in Massachusetts can be directly scraped from the link, https://www.ahd.com/states/hospital_MA.html. The details of these hospital statistics are described here. hosp_web &lt;- data.frame() for (st in c(state.abb, &quot;DC&quot;)){ url = paste(&quot;https://www.ahd.com/states/hospital_&quot;, st, &quot;.html&quot;, sep=&#39;&#39;) st_df &lt;- read_html(url) %&gt;% html_nodes(&quot;table&quot;) %&gt;% .[[2]] %&gt;% html_table() st_df &lt;- as.data.frame.matrix(eval(parse(text=st))) # removing the TOTAL row at the end of each table st_df &lt;- st_df[!(st_df$&quot;Hospital Name&quot;==&quot;T O T A L&quot;),] st_df$State &lt;- st hosp_web &lt;- rbind(hosp_web, st_df) } 4.2.2 Wrangling Let’s take a look at the data structure of the raw scrapped hospital demographics. str(hosp_web) ## &#39;data.frame&#39;: 3907 obs. of 7 variables: ## $ Hospital_name : chr &quot;Alaska Native Medical Center&quot; &quot;Alaska Regional Hospital&quot; &quot;Bartlett Regional Hospital&quot; &quot;Central Peninsula General Hospital&quot; ... ## $ City : chr &quot;Anchorage&quot; &quot;Anchorage&quot; &quot;Juneau&quot; &quot;Soldotna&quot; ... ## $ Staffed_beds : chr &quot;152&quot; &quot;174&quot; &quot;57&quot; &quot;106&quot; ... ## $ Total_discharges : chr &quot;7,320&quot; &quot;6,405&quot; &quot;1,710&quot; &quot;2,575&quot; ... ## $ Patient_days : chr &quot;38,687&quot; &quot;33,507&quot; &quot;6,325&quot; &quot;10,186&quot; ... ## $ Gross_patient_revenue: chr &quot;$0&quot; &quot;$947,754&quot; &quot;$147,231&quot; &quot;$305,469&quot; ... ## $ State : chr &quot;AK&quot; &quot;AK&quot; &quot;AK&quot; &quot;AK&quot; ... To do: We need to turn all the demographic information into numeric columns so we can use them as continuous variables. These values are reported with commas, so we need to strip these out. All the gross patient revenues are reported with a dollar sign in addition to the commas, so we need to strip those out too. Proper cases are harder to match on, will convert all letters in city and hospital name to upper case. It looks like some hospital has a gross patient revenue of $0…is this possible? Will explore this after dealing with all of the above first. hosp_clean &lt;- transform(hosp_web, Staffed_beds = as.numeric(gsub(&quot;,&quot;, &quot;&quot;, Staffed_beds)), Total_discharges = as.numeric(gsub(&quot;,&quot;, &quot;&quot;, Total_discharges)), Patient_days = as.numeric(gsub(&quot;,&quot;,&quot;&quot;, Patient_days)), Gross_patient_revenue = as.numeric(gsub(&quot;\\\\$|,&quot;, &quot;&quot;, Gross_patient_revenue)), Hospital_name = toupper(Hospital_name), City = toupper(City) ) summary(hosp_clean) ## Hospital_name City Staffed_beds Total_discharges ## Length:3907 Length:3907 Min. : 0.0 Min. : 0 ## Class :character Class :character 1st Qu.: 48.0 1st Qu.: 1244 ## Mode :character Mode :character Median : 133.0 Median : 4562 ## Mean : 204.8 Mean : 8017 ## 3rd Qu.: 264.0 3rd Qu.: 11336 ## Max. :36985.0 Max. :136646 ## Patient_days Gross_patient_revenue State ## Min. : 0 Min. : 0 Length:3907 ## 1st Qu.: 4104 1st Qu.: 98340 Class :character ## Median : 18892 Median : 377425 Mode :character ## Mean : 37794 Mean : 797958 ## 3rd Qu.: 51621 3rd Qu.: 1001421 ## Max. :695643 Max. :15618749 It looks like the zero value wasn’t just for the gross patient revenue. From the summary output, we can see that the minimum values on all hospital demographics (staffed beds, total discharges, patient days, gross patient revenue) are zero, which doesn’t seem right. Theorethically, it is impossible for any functioning hospital to have a total of zero on any of these characteristics. Would having a total of zero number of staffed beds really make it a hospital? Can a hospital survive on a gross patient revenue of zero dollars? We thought that it might be a web scrapping error, but when we went back and looked on the website, some of their tables definitely have random zero hospital statistics and some even have a whole row of zeros for certain hospitals. The metadata wasn’t very clear on this, but it seems like it is their way of representing missing data. Instead of keeping them as zeros, which would affect any computation we want to perform on these continuous variables, we will convert every zero into a true missing value, NA. But if a hospital has all missing demographics (the entire row of zeros), then we will just remove that hospital entirely (delete the whole row). # the demographics are columns 3 to 6 of the data frame is.na(hosp_clean[,3:6]) &lt;- !hosp_clean[,3:6] # turn 0&#39;s to NAs hosp_clean &lt;- hosp_clean[rowSums(is.na(hosp_clean)) &lt; 4,] # only delete hosp with all four NAs summary(hosp_clean) ## Hospital_name City Staffed_beds Total_discharges ## Length:3456 Length:3456 Min. : 1.0 Min. : 1 ## Class :character Class :character 1st Qu.: 73.0 1st Qu.: 2141 ## Mode :character Mode :character Median : 157.0 Median : 5692 ## Mean : 231.6 Mean : 9087 ## 3rd Qu.: 290.0 3rd Qu.: 12564 ## Max. :36985.0 Max. :136646 ## NA&#39;s :1 NA&#39;s :9 ## Patient_days Gross_patient_revenue State ## Min. : 1 Min. : 2298 Length:3456 ## 1st Qu.: 7740 1st Qu.: 188177 Class :character ## Median : 23922 Median : 504646 Mode :character ## Mean : 42838 Mean : 923192 ## 3rd Qu.: 57391 3rd Qu.: 1149258 ## Max. :695643 Max. :15618749 ## NA&#39;s :9 NA&#39;s :79 Now the minimum value is 1…still questionable and potentially causing the skew in their distributions. But we did take a look at these specific hospitals with any one demographic characteristic of value 1 and they seem to also have low values of the other characteristics as well (not necessarily exactly of 1, that would’ve been even more suspicious), so these may very well be valid who knows. Anyway, we need to move on with our lives, I mean, to merging with hosp_afl (which is a subset of practitioners who are affiliated with a hospital from the previous section) on the hospital name and state since different hospitals in different states can have the same name. hosps &lt;- inner_join(hosp_afl, hosp_clean, by=c(&quot;hosp_afl_lbn_1&quot;=&quot;Hospital_name&quot;, &quot;st&quot;=&quot;State&quot;)) summary(hosps) ## hosp_afl_lbn_1 st cty ## Length:2770 Length:2770 CHARLOTTESVILLE: 64 ## Class :character Class :character BANGOR : 46 ## Mode :character Mode :character PHILADELPHIA : 45 ## BOSTON : 44 ## CHICAGO : 44 ## NASHVILLE : 31 ## (Other) :2496 ## zip ehr hosp_afl_1 ## Length:2770 :2216 Min. : 10001 ## Class :character Y: 554 1st Qu.:110079 ## Mode :character Median :240207 ## Mean :257898 ## 3rd Qu.:390027 ## Max. :670073 ## ## pri_spec gndr grd_yr ## NURSE PRACTITIONER : 471 F:1407 Min. :1964 ## INTERNAL MEDICINE : 453 M:1363 1st Qu.:2004 ## PHYSICIAN ASSISTANT : 330 Median :2009 ## FAMILY PRACTICE : 174 Mean :2007 ## CERTIFIED REGISTERED NURSE ANESTHETIST: 161 3rd Qu.:2012 ## ANESTHESIOLOGY : 122 Max. :2016 ## (Other) :1059 ## City Staffed_beds Total_discharges Patient_days ## Length:2770 Min. : 7.0 Min. : 12 Min. : 37 ## Class :character 1st Qu.: 185.0 1st Qu.: 8070 1st Qu.: 34240 ## Mode :character Median : 321.0 Median :14648 Median : 67620 ## Mean : 382.5 Mean :17349 Mean : 87887 ## 3rd Qu.: 505.8 3rd Qu.:23775 3rd Qu.:116524 ## Max. :1750.0 Max. :77757 Max. :425114 ## ## Gross_patient_revenue ## Min. : 3736 ## 1st Qu.: 696861 ## Median : 1325449 ## Mean : 1977153 ## 3rd Qu.: 2466744 ## Max. :14140692 ## NA&#39;s :7 We managed to get a {r} (nrow(hosps)/nrow(hosp_clean))*100% match on the hospitals between the two data sets! And the summary statistics on those hospital demographics look a lot nicer and less skewed! &lt;——actually check this again on final run!!!! 4.2.3 Output # clean up intermediate data sets rm(hosp_web, hosp_clean, hosp_afl) # permanently save hospital-level analysis dataset to repo saveRDS(hosps, file = &quot;./data/hosps.rds&quot;) Again, we are storing the hosps data set as a .rds file in our repo under the /data directory for reproducibility of our analysis since it will be used to analyze the potential effects of hospital demographics on the use of EHR, which is another aspect of our Primary Analysis. This data set will also be subsequently merge with the EHR vendor and product information discussed in the next section to explore hospital demographics by specific types of EHR used. 4.3 Vendors &amp; Products (EHR) Since so many professionals and hospitals across the U.S. have already adopted EHR, we realized that simplying looking at the binary outcome of EHR use would be too boring of a project. Thus, we were curious to further explore the demographics of those who do use EHR by the specific types of EHR vendor or product. Fortunately, we were able to find data to support this additional secondary/exploratory analysis. 4.3.1 Source/Metadata The Health IT Dashboard provides certified health IT product data from the ONC Certified Health IT Product List (CHPL) such as the unique vendors, products, and product types of each certified health IT product used as part of the Medicare EHR Incentive Program. We downloaded only the 2016 dataset, which also includes unique provider identifiers (NPI), in order to match the EPs dataset discussed in the first section of this chapter. As the metadata explains, a provider in this dataset can be either an eligible professional (EP) and eligible hospital (Hospital), as distinguished by the Provider_Type column. Thus, only the Provider_Type == 'EP' records is merged with the subset of EPs who are not affiliated with any hospital, and the Provider_Type == 'Hospital' records is merged with the subset of EPs who are affiliated with a hospital, and therefore directly merged with the combined and cleaned version of the hosp dataset discussed in the previous section of this chapter. EHR &lt;- read.csv(&quot;https://dashboard.healthit.gov/datadashboard/data/MU_REPORT_2016.csv&quot;) 4.3.2 Wrangling Data structure, you know the drill. str(EHR) ## &#39;data.frame&#39;: 505914 obs. of 23 variables: ## $ NPI : int 1003000142 1003000522 1003000597 1003000639 1003000902 1003000936 1003000936 1003001256 1003001256 1003001462 ... ## $ CCN : int NA NA NA NA NA NA NA NA NA NA ... ## $ Provider_Type : Factor w/ 2 levels &quot;EP&quot;,&quot;Hospital&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ Business_State_Territory : Factor w/ 56 levels &quot;Alabama&quot;,&quot;Alaska&quot;,..: 38 11 39 5 17 45 45 6 6 12 ... ## $ ZIP : Factor w/ 11921 levels &quot;&quot;,&quot;00603&quot;,&quot;00612&quot;,..: 5619 4304 9168 10670 5353 3731 3731 10037 10037 4055 ... ## $ Specialty : Factor w/ 288 levels &quot;&quot;,&quot;Acupuncturist&quot;,..: 177 9 279 263 79 27 27 79 79 235 ... ## $ Hospital_Type : Factor w/ 3 levels &quot;&quot;,&quot;Critical Access&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ Program_Type : Factor w/ 2 levels &quot;Medicare&quot;,&quot;Medicare/Medicaid&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## $ Program_Year : int 2016 2016 2016 2016 2016 2016 2016 2016 2016 2016 ... ## $ Provider_Stage_Number : Factor w/ 2 levels &quot;Stage 1&quot;,&quot;Stage 2&quot;: 2 2 1 1 2 2 2 2 2 1 ... ## $ Payment_Year : int 3 5 NA NA 5 3 3 5 5 NA ... ## $ Attestation_Month : int 2 1 1 2 1 5 5 2 2 3 ... ## $ Attestation_Year : int 2017 2017 2017 2017 2017 2017 2017 2017 2017 2017 ... ## $ MU_Definition_2014 : logi NA NA NA NA NA NA ... ## $ Stage_2_Scheduled_2014 : int 0 1 0 0 1 0 0 0 0 0 ... ## $ EHR_Certification_Number : Factor w/ 3550 levels &quot;0014E0087U0WV35&quot;,..: 2699 1660 2177 2303 2965 1119 1119 2791 2791 2023 ... ## $ EHR_Product_CHP_Id : Factor w/ 2317 levels &quot;14.02.02.1026.A033.01.01.0.170217&quot;,..: 1876 346 1168 1403 2226 136 1747 1403 1876 1004 ... ## $ Vendor_Name : Factor w/ 484 levels &quot;4medica, Inc.&quot;,..: 134 35 338 134 159 170 170 134 134 120 ... ## $ EHR_Product_Name : Factor w/ 798 levels &quot;1 Connect BuildYourEMR&quot;,..: 192 42 554 192 81 251 252 192 192 533 ... ## $ EHR_Product_Version : Factor w/ 699 levels &quot;1&quot;,&quot;1.0&quot;,&quot;1.0.0&quot;,..: 489 113 385 494 50 549 206 494 489 155 ... ## $ Product_Classification : Factor w/ 3 levels &quot;&quot;,&quot;Complete EHR&quot;,..: 2 2 2 2 2 2 2 2 2 2 ... ## $ Product_Setting : Factor w/ 3 levels &quot;&quot;,&quot;Ambulatory&quot;,..: 2 2 2 2 2 2 2 2 2 2 ... ## $ Product_Certification_Edition_Yr: int 2014 2014 2014 2014 2014 2014 2014 2014 2014 2014 ... There are actually a lot of variables here that are not informative so we can drop them and just focus on a smaller set, i.e. program year would just be 2016 on every row in the data, EHR certification number or CHP ID is at an unnecessary level of detail. Let’s select the important columns and a few potentially interesting variables to summarize by (thus, using distinct instead of select). EHR_clean &lt;- EHR %&gt;% distinct(NPI, CCN, Provider_Type, Business_State_Territory, ZIP, Specialty, Hospital_Type, Vendor_Name, EHR_Product_Name, Product_Classification, Product_Setting) summary(EHR_clean) ## NPI CCN Provider_Type ## Min. :1.003e+09 Min. : 10001 EP :393375 ## 1st Qu.:1.255e+09 1st Qu.:121301 Hospital: 16330 ## Median :1.508e+09 Median :241361 ## Mean :1.501e+09 Mean :261394 ## 3rd Qu.:1.750e+09 3rd Qu.:390179 ## Max. :1.993e+09 Max. :670114 ## NA&#39;s :393375 ## Business_State_Territory ZIP ## California : 31692 : 16330 ## Minnesota : 24252 55905 : 11278 ## Florida : 22664 48109 : 3336 ## Texas : 22307 02114 : 3021 ## Pennsylvania: 20564 32224 : 2818 ## Michigan : 19739 60611 : 2521 ## (Other) :268487 (Other):370401 ## Specialty ## Family Medicine : 61485 ## Internal Medicine : 45820 ## Student in an Organized Health Care Education/Training Program: 17552 ## Cardiovascular Disease : 17524 ## : 16330 ## (Other) :250764 ## NA&#39;s : 230 ## Hospital_Type Vendor_Name ## :393375 Epic Systems Corporation:133637 ## Critical Access: 3348 Cerner Corporation : 70367 ## General : 12982 Allscripts : 28067 ## athenahealth, Inc. : 20970 ## eClinicalWorks, LLC : 16354 ## GE Healthcare : 14882 ## (Other) :125428 ## EHR_Product_Name ## EpicCare Ambulatory 2014 Certified EHR Suite: 71207 ## athenaClinicals : 20945 ## Beacon Oncology 2014 Certified Module : 16281 ## eClinicalWorks : 16097 ## NextGen Ambulatory EHR : 13616 ## Powerchart (Clinical) : 13293 ## (Other) :258266 ## Product_Classification Product_Setting ## : 14690 : 14690 ## Complete EHR:202827 Ambulatory:325708 ## Modular EHR :192188 Inpatient : 69307 ## ## ## ## Observations: There are 485841 records of missing CCN (the identifying number for eligible hospitals) and missing hospital type, which matches up with the number of records that are Provider_Type == 'EP'. It makes sense since these variables would not be relevant to an eligible professional (EP), who is not affiliated with any hospital. There are exactly 20073 records of missing zip codes and blank specialty (specifically not NA’s), and this number matches up with the number of Provider_Type == 'Hospital'. It sounds like the first step we may need to do is to split the data into EPs and hospitals since there are enough distinct variables relevant for each type. Then we can merge each split with their corresponding demographic data from the previous sections. We want to left join with the EPs data set on NPI, which has one row per physician by their unique NPI (one-to-many merge) We want to left join with the hosps data set on CCN, which has one row per hospital by their unique CCN (one-to-many merge) Then separately check on their summaries again? # split for EPs EHR_EPs &lt;- EHR_clean %&gt;% filter(Provider_Type == &#39;EP&#39;) %&gt;% select(-CCN, -Hospital_Type, -Provider_Type) # merge with EPs data EHR_EPs &lt;- left_join(EHR_EPs, EPs, by=c(&#39;NPI&#39;=&#39;npi&#39;)) # split for hospitals EHR_hosps &lt;- EHR_clean %&gt;% filter(Provider_Type == &#39;Hospital&#39;) %&gt;% select(-ZIP, -Specialty, -Provider_Type) # merge with hosps data EHR_hosps &lt;- left_join(EHR_hosps, hosps, by=c(&#39;CCN&#39;=&#39;hosp_afl_1&#39;)) why are there so many duplicate rows of the same thing? Later: specific product types are too dirty and not meaningful, will focus on vendor types. notice that the ehr column is not all y when we expect them to be. this explains why we had so many physicians who fell in the ehr='' category. the physicians whom we have EHR product usage information on did not answer “yes” to EHR use in the original EPs data. again the top primary specialties overall are 306, 247, 201, 128, 108, compare that to the top specialities among physicians whom we have vendor information: 30, 25, 15, 13, 57. merge with the cleaned hosp data 4.3.3 Output Although the specific product types are too granular and not meaningful enough to clean, we believe that exploring the professional and hospital demographics across vendor types may still be interesting, especially if we focus on the top 10 most popular vendors or classify the smaller local vendors as one group. "],
["primary.html", "Chapter 5 Primary Analysis 5.1 Physician Demographics 5.2 Hospital Demographics", " Chapter 5 Primary Analysis [resate our primary objectives here and explain why we split the primary analysis into the following sections] 5.1 Physician Demographics Since practitioners who are affiliated with a hospital may not have a choice in using EHR or not, we will exclude these from our analysis population, which is now just the practitioners who enrolled in the Medicare Incentive Program who are not affiliated with any hospital, which come from the data set EPs that we cleaned in section 4.1. EPs &lt;- readRDS(&quot;./data/EPs.rds&quot;) [explain that we are doing logistic regression model because of our binary outcome EHR use, and write out the mathematical theory and methods here.] 5.1.1 Exploratory Before fitting our model, we explored the relationships between our variables of interest using Association Rule Learning. We will use the R package called arulesViz to help us visualize this because we have mostly categorical variables with too many levels for simple correlation matrices to handle. Here, each “transaction” is a practitioner who adapted EHR as part of the Medicare EHR Incentive Program in the U.S. library(&quot;arulesViz&quot;) ## Loading required package: arules ## ## Attaching package: &#39;arules&#39; ## The following object is masked from &#39;package:car&#39;: ## ## recode ## The following object is masked from &#39;package:dplyr&#39;: ## ## recode ## The following objects are masked from &#39;package:base&#39;: ## ## abbreviate, write ## Loading required package: grid # first need to keep certain associational variables of interest and discretize them corr &lt;- EPs %&gt;% ungroup() %&gt;% filter(med_sch != &quot;OTHER&quot;) %&gt;% select(gndr, grd_yr, pri_spec, st) %&gt;% mutate(grd_yr = as.factor(grd_yr), st = as.factor(st)) # convert from a data frame to a transaction dataset corrt &lt;- as(corr, &quot;transactions&quot;) # create rules using the apriori rules &lt;- apriori(corrt, parameter=list(support=0.01, confidence=0.5)) ## Apriori ## ## Parameter specification: ## confidence minval smax arem aval originalSupport maxtime support minlen ## 0.5 0.1 1 none FALSE TRUE 5 0.01 1 ## maxlen target ext ## 10 rules FALSE ## ## Algorithmic control: ## filter tree heap memopt load sort verbose ## 0.1 TRUE TRUE FALSE TRUE 2 TRUE ## ## Absolute minimum support count: 4 ## ## set item appearances ...[0 item(s)] done [0.00s]. ## set transactions ...[145 item(s), 468 transaction(s)] done [0.00s]. ## sorting and recoding items ... [70 item(s)] done [0.00s]. ## creating transaction tree ... done [0.00s]. ## checking subsets of size 1 2 3 done [0.00s]. ## writing ... [85 rule(s)] done [0.00s]. ## creating S4 object ... done [0.00s]. plot(rules) The result is a a set of ______________ association rules with generally high confidence and low support (proportion of transactions in the data set which contain the item set). Let’s first trim this down a bit to show only important rules (confidence &gt; 0.85). We’ll pick the top 30 rules so we have a smaller subset to find meaningful relationships. The top 30 rules are chosen with respect to the lift measure (a measure of rule strength) - the deviation of the support of the whole rule from the support expected under independence given the supports of both sides of the rule. subrules &lt;- rules[quality(rules)$confidence &gt; 0.85] inspect(head(sort(subrules, by =&quot;lift&quot;),30)) ## lhs rhs support confidence lift count ## [1] {st=OK} =&gt; {gndr=M} 0.01068376 1.0000000 2.197183 5 ## [2] {grd_yr=2012, ## pri_spec=CHIROPRACTIC} =&gt; {gndr=M} 0.01282051 1.0000000 2.197183 6 ## [3] {pri_spec=DIAGNOSTIC RADIOLOGY} =&gt; {gndr=M} 0.01282051 0.8571429 1.883300 6 ## [4] {grd_yr=2007, ## pri_spec=OPTOMETRY} =&gt; {gndr=M} 0.01282051 0.8571429 1.883300 6 ## [5] {grd_yr=2007, ## pri_spec=NURSE PRACTITIONER} =&gt; {gndr=F} 0.01068376 1.0000000 1.835294 5 ## [6] {pri_spec=NURSE PRACTITIONER} =&gt; {gndr=F} 0.05555556 0.9629630 1.767320 26 ## [7] {pri_spec=PEDIATRIC MEDICINE} =&gt; {gndr=F} 0.01709402 0.8888889 1.631373 8 plot(subrules, method=&quot;grouped&quot;, control=list(k=50)) We concluded the following: Practitioner graduation year is not very interesting Medical School, Primary Specialty, and Gender had the most meaningful associations However, we would choose only one of medical school or primary specialty. They are likely highly correlated because there are specialty-specific schools such as chiropractic schools. Now we need to explore the relationships of our continuous independent variables Years since graduation by gender using jittered violin plots EPs %&gt;% melt(id.vars=&quot;gndr&quot;, measure.vars=&quot;yrs_grd&quot;) %&gt;% ggplot(aes(gndr, value)) + geom_jitter(alpha = 0.1) + geom_violin(alpha = 0.75) + facet_grid(variable ~ .) + scale_y_sqrt() Gender seems to be pretty independent of the number of years since graduation so we should be able to add both to the model without influencing each other’s effects. The distribution of years since graduation is skewed, so we used a square root scale to make the kernel density curves look more symmetric in the plots than it otherwise would have been. The actual values of the years since graduation were left alone so we could intuitively interpret the results from our model. Number of locations by gender using jittered violin plots EPs %&gt;% melt(id.vars=&quot;gndr&quot;, measure.vars=&quot;locations&quot;) %&gt;% ggplot(aes(gndr, value)) + geom_jitter(alpha = 0.1) + geom_violin(alpha = 0.75) + facet_grid(variable ~ .) + scale_y_log10() While practice locations seem to be distributed evenly between males and females, note that the large majority of physicians in our data set have only one location. There are a few outliers who have over 300 unique zip codes associated with their practices. Years since graduation by credentials using bubble plots EPs %&gt;% mutate(cred = reorder(cred, yrs_grd)) %&gt;% ggplot(aes(cred, yrs_grd)) + stat_sum(aes(size = ..n.., group = 1)) + scale_size_area(max_size = 10) Credentials (physician degrees) had one of the fewest number of levels, so we wanted to see if it was a good candidate for our model. The distribution of years since graduation looked pretty consistent across different credentials. Unfortunately, there were disproportionally high numbers of physicians with credentials listed as N/A (~75%), meaning their credential was unknown, so we could not use this variable in our model. Gender, years since graduation, and number of locations by EHR use # scatter plot matrix of all three effects by EHR use my_colors &lt;- brewer.pal(nlevels(as.factor(EPs$ehr)), &quot;Set1&quot;) ## Warning in brewer.pal(nlevels(as.factor(EPs$ehr)), &quot;Set1&quot;): minimal value for n is 3, returning requested palette with 3 different levels EPs %&gt;% mutate(gender = as.factor(as.integer(gndr))) %&gt;% scatterplotMatrix(~gender+yrs_grd+locations|ehr, data=., col=my_colors, smoother.args=list(col=&quot;grey&quot;), cex=1.5 , pch=c(15,16), legend.plot=FALSE) # bubble plot of years since graduation by EHR use EPs %&gt;% ggplot(aes(ehr, yrs_grd)) + stat_sum(aes(size = ..n.., group = 1)) + scale_size_area(max_size = 10) # jittered violin plot of years since graduation by EHR use EPs %&gt;% melt(id.vars=&quot;ehr&quot;, measure.vars=&quot;yrs_grd&quot;) %&gt;% ggplot(aes(ehr, value)) + geom_jitter(alpha = 0.1) + geom_violin(alpha = 0.75) + facet_grid(variable ~ .) + scale_y_sqrt() Note that we forced gender, which is binary, into the scatter plot matrix so just ignore any noise between the values 1 and 2 on the scale for gender. From the this scatter plot matrix, it is apparent that the distribution of gender and years since graduation differ by EHR use (as indicated by the red and blue colors, blinded here because we want to give you some suspense dun dun dun - but actually, we just couldn’t get the legend to not completely cover the density curves). A general observation from the bubble and violin plots is that there are proportionally more physicians in our data who have not used EHR. so we already have an imbalance in sample size between the two groups. But overall, our sample size is still large enough. 5.1.2 Final Analysis 5.1.2.1 Fit the Logistic Model [write out our final model] # fit the model model &lt;- glm(ehr ~ gndr + yrs_grd + locations, data = EPs, family = binomial) summary(model) ## ## Call: ## glm(formula = ehr ~ gndr + yrs_grd + locations, family = binomial, ## data = EPs) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.5328 -0.3522 -0.2465 -0.2338 2.7075 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -3.66972 0.23914 -15.345 &lt; 2e-16 *** ## gndrM 0.85466 0.24895 3.433 0.000597 *** ## yrs_grd 0.01783 0.01031 1.730 0.083652 . ## locations 0.01255 0.08678 0.145 0.885043 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 575.08 on 1600 degrees of freedom ## Residual deviance: 558.65 on 1597 degrees of freedom ## AIC: 566.65 ## ## Number of Fisher Scoring iterations: 6 #table of odds ratios with 95% CI exp(cbind(OR = coef(model), confint(model))) ## Waiting for profiling to be done... ## OR 2.5 % 97.5 % ## (Intercept) 0.02548362 0.01585523 0.04123045 ## gndrM 2.35056990 1.44398896 3.84687839 ## yrs_grd 1.01798938 0.99676093 1.03804917 ## locations 1.01262573 0.79323722 1.15495640 [copy the interpretation from katherine’s website] We did not find a statistically significant effect in the number of practice locations on the use of EHR, so this makes me feel better about collapsing the records by unique physicians and losing the specific location information like city, state, and zip code. If owning practices in various different locations had an effect on EHR use, then we would have needed to consider fitting a mixed effects model that takes into account the random effects of the different locations these physicians practice in, or consider a repeated measures analysis on the non-collapsed data where a physician can have repeated records for each unique location of their practice, etc. But since we lack statistical evidence for the number of practice locations to show an effect on EHR use, we have no reason to seek a better model to fit. 5.1.2.2 Predicted Probabilities We can look at the effects of varying years since graduation by gender while holding the number of practice locations constant at its sample mean on the outcome of EHR use with a ribbon plot of the predicted probabilities. # create a table of predicted probabilities varying the value of years since graduation and gender varyvals &lt;- with(EPs, data.frame(yrs_grd = rep(seq(from = min(yrs_grd), to = max(yrs_grd), length.out = 100), 2), locations = mean(locations), gndr = factor(rep(c(&#39;M&#39;,&#39;F&#39;), each = 100)))) pred &lt;- cbind(varyvals, predict(model, newdata = varyvals, type = &quot;link&quot;, se = TRUE)) pred &lt;- within(pred, { PredictedProb &lt;- plogis(fit) LL &lt;- plogis(fit - (1.96 * se.fit)) UL &lt;- plogis(fit + (1.96 * se.fit)) }) # ribbon plot ggplot(pred, aes(x = yrs_grd, y = PredictedProb)) + geom_ribbon(aes(ymin = LL, ymax = UL, fill = gndr), alpha = 0.2) + geom_line(aes(colour = gndr), size = 1) Well, how well does the model with these predictors fit compared to a null model? Let’s perform the likelihood ratio test using a chi-square test of {r} with(model, null.deviance - deviance) (the difference in deviance for the two models) with {r} with(model, df.null - df.residual) degrees of freedom on our observed data, which gives us the following p-value: with(model, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE)) ## [1] 0.0009280001 Looks like our model did pretty well! 5.2 Hospital Demographics 5.2.1 Exploratory Describe the analysis population outline a model we want to fit, talk some math what are our aims? correlations 5.2.2 Final Analysis state our final model based on correlation results Run the model describe the results Conclusion/discussion "],
["secondary.html", "Chapter 6 Secondary Analysis 6.1 By Geographical Regions 6.2 By EHR Vendors", " Chapter 6 Secondary Analysis 6.1 By Geographical Regions 6.1.1 Physician Demographics 6.1.2 Hospital Demographics 6.2 By EHR Vendors 6.2.1 Physician Demographics Check the distributions of number of practice locations, states, products, and vendors among practitioners whom we have EHR usage information on. Counts of these distributions are the number of practitioners. Explore practitioner demographics: gender, graduation year, medical school attended, primary specialty. merged_EPs_vendor %&gt;% group_by(Graduation.year) %&gt;% select(products) %&gt;% table() ** ADD LATER: show N’s at each point of the x-axis ** phys_EHR %&gt;% ggplot(aes(factor(products), Graduation.year)) + geom_boxplot() + facet_grid(.~Gender) + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.25)) + xlab(&quot;Number of EHR Products&quot;) + ylab(&quot;Graduation Year&quot;) + ggtitle(&quot;Dist of Grad Year by Number of EHR Products Used by Gender&quot;) Perform Association Rule Learning on all variables from the first two sections. check the validity of using this method if my variables are not independent from one another. Here, each “transaction” is a practitioner who adapted EHR as part of the Medicare EHR Incentive Program in the U.S. ***used becuse we have variables with a lot of variables library(&quot;arulesViz&quot;) # need to keep certain associational variables of interest and discretize them assoc &lt;- phys_EHR %&gt;% ungroup() %&gt;% select(-NPI, -First.Name, -Last.Name, -Used.electronic.health.records, -EHRuse) %&gt;% mutate(Gradyr = as.factor(Graduation.year), State = as.factor(state_abb), locations = as.factor(locations), products = as.factor(products), vendors = as.factor(vendors) ) %&gt;% select(-Graduation.year, -state_abb) View(assoc) # convert from a data frame to a transaction dataset assoctrans &lt;- as(assoc, &quot;transactions&quot;) # create rules using the apriori rules &lt;- apriori(assoctrans, parameter=list(support=0.01, confidence=0.5)) plot(rules) The result is a set of 4152 association rules with generally high confidence and low support (proportion of transactions in the dataset which contain the itemset). Let’s first trim this down a bit to show only important rules (confidence &gt; 0.85). We’ll pick the top 30 rules so we have a smaller subset to find meaningful relationships. The top 30 rules are chosen with respect to the lift measure (a measure of rule strength) - the deviation of the support of the whole rule from the support expected under independence given the supports of both sides of the rule. subrules &lt;- rules[quality(rules)$confidence &gt; 0.85] inspect(head(sort(subrules, by =&quot;lift&quot;),30)) plot(subrules, method=&quot;grouped&quot;, control=list(k=50)) The top 18 rules show that the strongest associations are among practitioners who use 5 EHR products across 2 different vendors in the state of Minnesota within a single practice. The second highest set of rules shows a strong association among practitioners who use 7 EHR products across 2 different vendors in the state of California within a single practice. To explore the top rules, we created a couple visualizations. We can visualize these top 18 rules using a directed network graph where the items are vertices and the directed edges are the rules in the direction of the antecedent (IF) to the consequent (THEN). (check this?) top18 &lt;- head(sort(subrules, by =&quot;lift&quot;),18) plot(top18, method=&quot;graph&quot;) # uses items and rules as vertices connecting them with directed edges plot(top18, method=&quot;graph&quot;, control=list(type=&quot;itemsets&quot;)) # uses itemsets as vertices and rules are represented by directed edges In a parallel coordinates plot, the width of the arrows represents support and the intensity of the color represent confidence. We plotted the top 18 rules. plot(top18, method=&quot;paracoord&quot;, control=list(reorder=TRUE)) Using Associative Rule Learning, we found the following factors were important: number of EHR products used number of vendors used region (states) The results from the physician-vendor data was not that helpful, so we decided not to use it in our final model. conclusions - how do these inform our final analyses? 6.2.2 Hospital Demographics "]
]
